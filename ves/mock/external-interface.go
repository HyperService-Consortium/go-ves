// Code generated by MockGen. DO NOT EDIT.
// Source: ../control/external-interface.go

// Package mock is a generated GoMock package.
package mock

import (
	json "encoding/json"
	opintent "github.com/HyperService-Consortium/go-uip/op-intent"
	uiptypes "github.com/HyperService-Consortium/go-uip/uiptypes"
	nsb_message "github.com/Myriad-Dreamin/go-ves/lib/net/nsb-client/nsb-message"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// NSBClient is a mock of NSBClient interface
type NSBClient struct {
	ctrl     *gomock.Controller
	recorder *NSBClientMockRecorder
}

// NSBClientMockRecorder is the mock recorder for NSBClient
type NSBClientMockRecorder struct {
	mock *NSBClient
}

// NewNSBClient creates a new mock instance
func NewNSBClient(ctrl *gomock.Controller) *NSBClient {
	mock := &NSBClient{ctrl: ctrl}
	mock.recorder = &NSBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *NSBClient) EXPECT() *NSBClientMockRecorder {
	return m.recorder
}

// FreezeInfo mocks base method
func (m *NSBClient) FreezeInfo(signer uiptypes.Signer, guid []byte, u uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreezeInfo", signer, guid, u)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FreezeInfo indicates an expected call of FreezeInfo
func (mr *NSBClientMockRecorder) FreezeInfo(signer, guid, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreezeInfo", reflect.TypeOf((*NSBClient)(nil).FreezeInfo), signer, guid, u)
}

// AddMerkleProof mocks base method
func (m *NSBClient) AddMerkleProof(user uiptypes.Signer, toAddress []byte, merkleType uint16, rootHash, proof, key, value []byte) (*nsb_message.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMerkleProof", user, toAddress, merkleType, rootHash, proof, key, value)
	ret0, _ := ret[0].(*nsb_message.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMerkleProof indicates an expected call of AddMerkleProof
func (mr *NSBClientMockRecorder) AddMerkleProof(user, toAddress, merkleType, rootHash, proof, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMerkleProof", reflect.TypeOf((*NSBClient)(nil).AddMerkleProof), user, toAddress, merkleType, rootHash, proof, key, value)
}

// AddBlockCheck mocks base method
func (m *NSBClient) AddBlockCheck(user uiptypes.Signer, toAddress []byte, chainID uint64, blockID, rootHash []byte, rcType uint8) (*nsb_message.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlockCheck", user, toAddress, chainID, blockID, rootHash, rcType)
	ret0, _ := ret[0].(*nsb_message.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlockCheck indicates an expected call of AddBlockCheck
func (mr *NSBClientMockRecorder) AddBlockCheck(user, toAddress, chainID, blockID, rootHash, rcType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlockCheck", reflect.TypeOf((*NSBClient)(nil).AddBlockCheck), user, toAddress, chainID, blockID, rootHash, rcType)
}

// InsuranceClaim mocks base method
func (m *NSBClient) InsuranceClaim(user uiptypes.Signer, contractAddress []byte, tid, aid uint64) (*nsb_message.DeliverTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsuranceClaim", user, contractAddress, tid, aid)
	ret0, _ := ret[0].(*nsb_message.DeliverTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsuranceClaim indicates an expected call of InsuranceClaim
func (mr *NSBClientMockRecorder) InsuranceClaim(user, contractAddress, tid, aid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsuranceClaim", reflect.TypeOf((*NSBClient)(nil).InsuranceClaim), user, contractAddress, tid, aid)
}

// CreateISC mocks base method
func (m *NSBClient) CreateISC(signer uiptypes.Signer, uint32s []uint32, bytes, bytes2 [][]byte, bytes3 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateISC", signer, uint32s, bytes, bytes2, bytes3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateISC indicates an expected call of CreateISC
func (mr *NSBClientMockRecorder) CreateISC(signer, uint32s, bytes, bytes2, bytes3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateISC", reflect.TypeOf((*NSBClient)(nil).CreateISC), signer, uint32s, bytes, bytes2, bytes3)
}

// OpIntentInitializer is a mock of OpIntentInitializerI interface
type OpIntentInitializer struct {
	ctrl     *gomock.Controller
	recorder *OpIntentInitializerMockRecorder
}

// OpIntentInitializerMockRecorder is the mock recorder for OpIntentInitializer
type OpIntentInitializerMockRecorder struct {
	mock *OpIntentInitializer
}

// NewOpIntentInitializer creates a new mock instance
func NewOpIntentInitializer(ctrl *gomock.Controller) *OpIntentInitializer {
	mock := &OpIntentInitializer{ctrl: ctrl}
	mock.recorder = &OpIntentInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *OpIntentInitializer) EXPECT() *OpIntentInitializerMockRecorder {
	return m.recorder
}

// InitContractInvocationOpIntent mocks base method
func (m *OpIntentInitializer) InitContractInvocationOpIntent(arg0 string, arg1 json.RawMessage) ([]*uiptypes.TransactionIntent, []*uiptypes.MerkleProofProposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitContractInvocationOpIntent", arg0, arg1)
	ret0, _ := ret[0].([]*uiptypes.TransactionIntent)
	ret1, _ := ret[1].([]*uiptypes.MerkleProofProposal)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InitContractInvocationOpIntent indicates an expected call of InitContractInvocationOpIntent
func (mr *OpIntentInitializerMockRecorder) InitContractInvocationOpIntent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitContractInvocationOpIntent", reflect.TypeOf((*OpIntentInitializer)(nil).InitContractInvocationOpIntent), arg0, arg1)
}

// InitOpIntent mocks base method
func (m *OpIntentInitializer) InitOpIntent(arg0 uiptypes.OpIntents) ([]*uiptypes.TransactionIntent, []*uiptypes.MerkleProofProposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitOpIntent", arg0)
	ret0, _ := ret[0].([]*uiptypes.TransactionIntent)
	ret1, _ := ret[1].([]*uiptypes.MerkleProofProposal)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InitOpIntent indicates an expected call of InitOpIntent
func (mr *OpIntentInitializerMockRecorder) InitOpIntent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitOpIntent", reflect.TypeOf((*OpIntentInitializer)(nil).InitOpIntent), arg0)
}

// InitPaymentOpIntent mocks base method
func (m *OpIntentInitializer) InitPaymentOpIntent(arg0 string, arg1 json.RawMessage) ([]*uiptypes.TransactionIntent, []*uiptypes.MerkleProofProposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitPaymentOpIntent", arg0, arg1)
	ret0, _ := ret[0].([]*uiptypes.TransactionIntent)
	ret1, _ := ret[1].([]*uiptypes.MerkleProofProposal)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InitPaymentOpIntent indicates an expected call of InitPaymentOpIntent
func (mr *OpIntentInitializerMockRecorder) InitPaymentOpIntent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitPaymentOpIntent", reflect.TypeOf((*OpIntentInitializer)(nil).InitPaymentOpIntent), arg0, arg1)
}

// TopologicalSort mocks base method
func (m *OpIntentInitializer) TopologicalSort(arg0 [][]*uiptypes.TransactionIntent, arg1 []opintent.Dependency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopologicalSort", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TopologicalSort indicates an expected call of TopologicalSort
func (mr *OpIntentInitializerMockRecorder) TopologicalSort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopologicalSort", reflect.TypeOf((*OpIntentInitializer)(nil).TopologicalSort), arg0, arg1)
}
