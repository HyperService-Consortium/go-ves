// Code generated by "stringer -type=CodeType"; DO NOT EDIT.

package types

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CodeOK-0]
	_ = x[CodeBindError-1]
	_ = x[CodeUnserializeDataError-2]
	_ = x[CodeInvalidParameters-3]
	_ = x[CodeGetRawDataError-4]
	_ = x[CodeToDo-5]
	_ = x[CodeGenericErrorR-6]
	_ = x[CodeInsertError-100]
	_ = x[CodeSelectError-101]
	_ = x[CodeNotFound-102]
	_ = x[CodeDeleteNoEffect-103]
	_ = x[CodeDuplicatePrimaryKey-104]
	_ = x[CodeUpdateError-105]
	_ = x[CodeDeleteError-106]
	_ = x[CodeBeginTransactionError-107]
	_ = x[CodeCommitTransactionError-108]
	_ = x[CodeDatabaseIncorrectStringValue-109]
	_ = x[CodeUpdateNoEffect-110]
	_ = x[CodeDatabaseErrorR-111]
	_ = x[CodeAuthGenerateTokenError-1000]
	_ = x[CodeAuthenticatePasswordError-1001]
	_ = x[CodeAuthenticatePolicyError-1002]
	_ = x[CodeChangeOwnerError-1003]
	_ = x[CodeGroupCreateError-1004]
	_ = x[CodeAddReadPrivilegeError-1005]
	_ = x[CodeAddWritePrivilegeError-1006]
	_ = x[CodeGrantNoEffect-1007]
	_ = x[CodeGrantError-1008]
	_ = x[CodeAuthenticationErrorR-1009]
	_ = x[CodeUserIDMissing-10000]
	_ = x[CodeUserWrongPassword-10001]
	_ = x[CodeWeakPassword-10002]
	_ = x[CodeInvalidCityCode-10003]
	_ = x[CodeBadPhone-10004]
	_ = x[CodeUserServiceErrorR-10005]
	_ = x[CodeSubmissionUploaded-11000]
	_ = x[CodeFSExecError-11001]
	_ = x[CodeUploadFileError-11002]
	_ = x[CodeConfigModifyError-11003]
	_ = x[CodeStatError-11004]
	_ = x[CodeFileSystemErrorR-11005]
	_ = x[CodeSessionInitError-12000]
	_ = x[CodeSessionRequestNSBError-12001]
	_ = x[CodeSessionInitGUIDError-12002]
	_ = x[CodeSessionInitOpIntentsError-12003]
	_ = x[CodeSessionRedisGetAckCountError-12004]
	_ = x[CodeSessionInsertAccountError-12005]
	_ = x[CodeSessionFindError-12006]
	_ = x[CodeSessionNotFindError-12007]
	_ = x[CodeSessionAcknowledgeError-12008]
	_ = x[CodeSessionAccountFindError-12009]
	_ = x[CodeSessionAccountNotFound-12010]
	_ = x[CodeSessionAccountGetTotolError-12011]
	_ = x[CodeSessionAccountGetAcknowledgedError-12012]
	_ = x[CodeSessionSignTxsError-12013]
	_ = x[CodeSessionFreezeInfoError-12014]
	_ = x[CodeSessionInitInternalRequestError-12015]
	_ = x[CodeSessionServiceErrorR-12016]
	_ = x[CodeTransactionFindError-13000]
	_ = x[CodeDeserializeTransactionError-13001]
	_ = x[CodeAttestationSendError-13002]
	_ = x[CodeNotEnoughParamInformation-13003]
	_ = x[CodeEnsureTransactionValueError-13004]
	_ = x[CodeParsePaymentOptionInconsistentValueError-13005]
	_ = x[CodeTransactionPrepareTranslateError-13006]
	_ = x[CodeTransactionTranslateError-13007]
	_ = x[CodeTransactionRawSerializeError-13008]
	_ = x[CodeTransactionServiceErrorR-13009]
	_ = x[CodeChainIDNotFound-14000]
	_ = x[CodeChainTypeNotFound-14001]
	_ = x[CodeTransactionTypeNotFound-14002]
	_ = x[CodeValueTypeNotFound-14003]
	_ = x[CodeGetBlockChainInterfaceError-14004]
	_ = x[CodeBlockChainErrorR-14005]
	_ = x[CodeConvertSignerError-15000]
	_ = x[CodeDecodeAdditionError-15001]
	_ = x[CodeDecodeAddressError-15002]
	_ = x[CodeConvertErrorR-15003]
	_ = x[CodeReadMessageError-16000]
	_ = x[CodeReadMessageIDError-16001]
	_ = x[CodeWebSocketErrorR-16002]
	_ = x[CodeNotConnected-17000]
	_ = x[CodeGetVESHostError-17001]
	_ = x[CodeExecuteError-17002]
	_ = x[CodeGRPCErrorR-17003]
}

const _CodeType_name = "CodeOKCodeBindErrorCodeUnserializeDataErrorCodeInvalidParametersCodeGetRawDataErrorCodeToDoCodeGenericErrorRCodeInsertErrorCodeSelectErrorCodeNotFoundCodeDeleteNoEffectCodeDuplicatePrimaryKeyCodeUpdateErrorCodeDeleteErrorCodeBeginTransactionErrorCodeCommitTransactionErrorCodeDatabaseIncorrectStringValueCodeUpdateNoEffectCodeDatabaseErrorRCodeAuthGenerateTokenErrorCodeAuthenticatePasswordErrorCodeAuthenticatePolicyErrorCodeChangeOwnerErrorCodeGroupCreateErrorCodeAddReadPrivilegeErrorCodeAddWritePrivilegeErrorCodeGrantNoEffectCodeGrantErrorCodeAuthenticationErrorRCodeUserIDMissingCodeUserWrongPasswordCodeWeakPasswordCodeInvalidCityCodeCodeBadPhoneCodeUserServiceErrorRCodeSubmissionUploadedCodeFSExecErrorCodeUploadFileErrorCodeConfigModifyErrorCodeStatErrorCodeFileSystemErrorRCodeSessionInitErrorCodeSessionRequestNSBErrorCodeSessionInitGUIDErrorCodeSessionInitOpIntentsErrorCodeSessionRedisGetAckCountErrorCodeSessionInsertAccountErrorCodeSessionFindErrorCodeSessionNotFindErrorCodeSessionAcknowledgeErrorCodeSessionAccountFindErrorCodeSessionAccountNotFoundCodeSessionAccountGetTotolErrorCodeSessionAccountGetAcknowledgedErrorCodeSessionSignTxsErrorCodeSessionFreezeInfoErrorCodeSessionInitInternalRequestErrorCodeSessionServiceErrorRCodeTransactionFindErrorCodeDeserializeTransactionErrorCodeAttestationSendErrorCodeNotEnoughParamInformationCodeEnsureTransactionValueErrorCodeParsePaymentOptionInconsistentValueErrorCodeTransactionPrepareTranslateErrorCodeTransactionTranslateErrorCodeTransactionRawSerializeErrorCodeTransactionServiceErrorRCodeChainIDNotFoundCodeChainTypeNotFoundCodeTransactionTypeNotFoundCodeValueTypeNotFoundCodeGetBlockChainInterfaceErrorCodeBlockChainErrorRCodeConvertSignerErrorCodeDecodeAdditionErrorCodeDecodeAddressErrorCodeConvertErrorRCodeReadMessageErrorCodeReadMessageIDErrorCodeWebSocketErrorRCodeNotConnectedCodeGetVESHostErrorCodeExecuteErrorCodeGRPCErrorR"

var _CodeType_map = map[CodeType]string{
	0:     _CodeType_name[0:6],
	1:     _CodeType_name[6:19],
	2:     _CodeType_name[19:43],
	3:     _CodeType_name[43:64],
	4:     _CodeType_name[64:83],
	5:     _CodeType_name[83:91],
	6:     _CodeType_name[91:108],
	100:   _CodeType_name[108:123],
	101:   _CodeType_name[123:138],
	102:   _CodeType_name[138:150],
	103:   _CodeType_name[150:168],
	104:   _CodeType_name[168:191],
	105:   _CodeType_name[191:206],
	106:   _CodeType_name[206:221],
	107:   _CodeType_name[221:246],
	108:   _CodeType_name[246:272],
	109:   _CodeType_name[272:304],
	110:   _CodeType_name[304:322],
	111:   _CodeType_name[322:340],
	1000:  _CodeType_name[340:366],
	1001:  _CodeType_name[366:395],
	1002:  _CodeType_name[395:422],
	1003:  _CodeType_name[422:442],
	1004:  _CodeType_name[442:462],
	1005:  _CodeType_name[462:487],
	1006:  _CodeType_name[487:513],
	1007:  _CodeType_name[513:530],
	1008:  _CodeType_name[530:544],
	1009:  _CodeType_name[544:568],
	10000: _CodeType_name[568:585],
	10001: _CodeType_name[585:606],
	10002: _CodeType_name[606:622],
	10003: _CodeType_name[622:641],
	10004: _CodeType_name[641:653],
	10005: _CodeType_name[653:674],
	11000: _CodeType_name[674:696],
	11001: _CodeType_name[696:711],
	11002: _CodeType_name[711:730],
	11003: _CodeType_name[730:751],
	11004: _CodeType_name[751:764],
	11005: _CodeType_name[764:784],
	12000: _CodeType_name[784:804],
	12001: _CodeType_name[804:830],
	12002: _CodeType_name[830:854],
	12003: _CodeType_name[854:883],
	12004: _CodeType_name[883:915],
	12005: _CodeType_name[915:944],
	12006: _CodeType_name[944:964],
	12007: _CodeType_name[964:987],
	12008: _CodeType_name[987:1014],
	12009: _CodeType_name[1014:1041],
	12010: _CodeType_name[1041:1067],
	12011: _CodeType_name[1067:1098],
	12012: _CodeType_name[1098:1136],
	12013: _CodeType_name[1136:1159],
	12014: _CodeType_name[1159:1185],
	12015: _CodeType_name[1185:1220],
	12016: _CodeType_name[1220:1244],
	13000: _CodeType_name[1244:1268],
	13001: _CodeType_name[1268:1299],
	13002: _CodeType_name[1299:1323],
	13003: _CodeType_name[1323:1352],
	13004: _CodeType_name[1352:1383],
	13005: _CodeType_name[1383:1427],
	13006: _CodeType_name[1427:1463],
	13007: _CodeType_name[1463:1492],
	13008: _CodeType_name[1492:1524],
	13009: _CodeType_name[1524:1552],
	14000: _CodeType_name[1552:1571],
	14001: _CodeType_name[1571:1592],
	14002: _CodeType_name[1592:1619],
	14003: _CodeType_name[1619:1640],
	14004: _CodeType_name[1640:1671],
	14005: _CodeType_name[1671:1691],
	15000: _CodeType_name[1691:1713],
	15001: _CodeType_name[1713:1736],
	15002: _CodeType_name[1736:1758],
	15003: _CodeType_name[1758:1775],
	16000: _CodeType_name[1775:1795],
	16001: _CodeType_name[1795:1817],
	16002: _CodeType_name[1817:1836],
	17000: _CodeType_name[1836:1852],
	17001: _CodeType_name[1852:1871],
	17002: _CodeType_name[1871:1887],
	17003: _CodeType_name[1887:1901],
}

func (i CodeType) String() string {
	if str, ok := _CodeType_map[i]; ok {
		return str
	}
	return "CodeType(" + strconv.FormatInt(int64(i), 10) + ")"
}
